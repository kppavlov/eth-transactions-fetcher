import { ITransaction } from "../../db/entities/transaction";
import { TransactionResponseDto } from "../../db/dto/transaction-response-dto";
import { rpcProvider } from "../../providers/eth-provider";
import {
  Block,
  Log,
  OrphanFilter,
  Signature,
  TransactionReceipt,
  TransactionResponse,
} from "ethers";

export const MockTransaction: ITransaction = {
  transactionHash:
    "0xcbc920e7bb89cbcb540a469a16226bf1057825283ab8eac3f45d00811eef8a64",
  transactionStatus: 1,
  blockHash:
    "0xc5a3664f031da2458646a01e18e6957fd1f43715524d94b7336a004b5635837d",
  blockNumber: 5702816,
  from: "0xd5e6f34bbd4251195c03e7bf3660677ed2315f70",
  to: "0x4c16d8c078ef6b56700c1be19a336915962df072",
  contractAddress: null,
  logsCount: 1,
  input:
    "0x6a627842000000000000000000000000d5e6f34bbd4251195c03e7bf3660677ed2315f70",
  value: "0",
};

export const mockTransactionResponse = {
  provider: rpcProvider,
  blockNumber: 4553069,
  blockHash:
    "0x20c16f757d1fecd1ca00006cb5e10b541b04c70ad0ab3c4cd444f4cd9a0d437b",
  index: 40,
  hash: "0xcbc920e7bb89cbcb540a469a16226bf1057825283ab8eac3f45d00811eef8a64",
  type: 2,
  to: null,
  from: "0x68ad60CC5e8f3B7cC53beaB321cf0e6036962dBc",
  nonce: 262,
  gasLimit: 3123717n,
  gasPrice: 1698988391n,
  maxPriorityFeePerGas: 1500000000n,
  maxFeePerGas: 1751844682n,
  maxFeePerBlobGas: null,
  data: `0x60e060405260008054600160a81b600160e81b031916650a8c0000007d60aa1b1790553480156200002f57600080fd5b5060405162003a3d38038062003a3d83398101604081905262000052916200020c565b806200005e33620001a3565b6001600160a01b038116620000c55760405162461bcd60e51b815260206004820152602260248201527f4272696467652063616e206e6f7420626520746865207a65726f206164647265604482015261737360f01b60648201526084015b60405180910390fd5b6001600160
a01b039081166080528316620001235760405162461bcd60e51b815260206004820181905260248201527f42616e6b2063616e206e6f7420626520746865207a65726f20616464726573736044820152606401620000bc565b6001600160a01b0382166200018a5760405162461bcd60e51b815260206004820152602660248201527f5442544320746f6b656e2063616e206e6f7420626520746865207a65726f206160448201526564647265737360d01b6064820152608401620000bc565b506001600160a01b0391821660a052166
0c05262000260565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200020957600080fd5b50565b6000806000606084860312156200022257600080fd5b83516200022f81620001f3565b60208501519093506200024281620001f3565b60408501519092506200025581620001f3565b809150509250925092565b60805160a05160c0516137
216200031c60003960008181610733015281816108bb01528181610bf401528181611db0015281816120f10152818161298701528181612af20152612c3901526000818161057901528181610c6101528181610dbc01528181610e4a01528181610f4f0152818161216d015281816122a50152818161239601528181612b500152612c9701526000818161075a015281816113f20152818161158e01528181611b620152612b7f01526137216000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c8
0638532c511116101b2578063a410d29b116100f9578063c36b32b7116100a2578063e5d3d7141161007c578063e5d3d7141461072e578063e78cea9214610755578063f2fde38b1461077c578063fc4e51f61461078f57600080fd5b8063c36b32b7146106ff578063c7ba034714610712578063d0ff65b51461071e57600080fd5b8063b0b54895116100d3578063b0b54895146106cd578063b9f78798146106d7578063bc7b6b99146106f757600080fd5b8063a410d29b1461068f578063a526d83b14610697578063aa271e1a14
6106aa57600080fd5b8063951315261161015b5780639a508c8e116101355780639a508c8e1461066b578063a0712d6814610673578063a0cceb951461068657600080fd5b80639513152614610647578063983b2d56146106505780639a4e36d51461066357600080fd5b8063897f712c1161018c578063897f712c1461060f5780638da5cb5b146106235780638f4ffcb11461063457600080fd5b80638532c511146105d95780638623ec7b146105e957806388aaf0c8146105fc57600080fd5b806347c1ffdb116102815780636c6
26aa41161022a5780637445a5a0116102045780637445a5a01461054657806376cdb03b1461057457806380df5ed2146105b3578063820b5513146105c657600080fd5b80636c626aa4146104d0578063714041561461052b578063715018a61461053e57600080fd5b806364e779b11161025b57806364e779b1146104955780636abe3a6c146104a85780636b32810b146104bb57600080fd5b806347c1ffdb1461046357806353dce4df1461046b5780635ae2da461461047e57600080fd5b80633092afd5116102e3578063461c63
73116102bd578063461c63731461042a578063475d05701461043d578063479aa9271461045057600080fd5b80633092afd5146103fb578063317dfa761461040e57806341906ab71461042157600080fd5b80631171bda9116103145780631171bda9146103b4578063124f65bd146103c75780632e73e398146103e857600080fd5b806309b53f511461033b5780630c68ba211461036c5780630f3425731461039f575b600080fd5b60005461035290600160a81b900463ffffffff1681565b60405163ffffffff909116815260200
15b60405180910390f35b61038f61037a366004613010565b60036020526000908152604090205460ff1681565b6040519015158152602001610363565b6103b26103ad366004613046565b6107a2565b005b6103b26103c2366004613063565b6107fd565b6103da6103d53660046130a4565b61081e565b604051908152602001610363565b6103b26103f636600461311d565b610883565b6103b2610409366004613010565b610931565b6103b261041c366004613063565b610ba5565b6103da60095481565b6103b26104383660
046131d5565b610c56565b6103b261044b366004613241565b610db1565b6103b261045e366004613010565b610fb2565b6103b2611077565b6103b2610479366004613291565b611115565b60005461035290600160c81b900463ffffffff1681565b6103b26104a33660046132dd565b611136565b6103b26104b63660046130a4565b611153565b6104c36116a0565b60405161036391906132f6565b61050a6104de3660046132dd565b60046020526000908152604090205467ffffffffffffffff8082169168010000000000000
00090041682565b6040805167ffffffffffffffff938416815292909116602083015201610363565b6103b2610539366004613010565b611702565b6103b26117bb565b6105596105543660046132dd565b6117cf565b60408051938452602084019290925290820152606001610363565b61059b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610363565b6103b26105c13660046130a4565b611807565b6103b26105d43660046130a456
5b6119f3565b6006546103529063ffffffff1681565b61059b6105f73660046132dd565b611d84565b600a5461059b906001600160a01b031681565b60005461038f90600160a01b900460ff1681565b6000546001600160a01b031661059b565b6103b2610642366004613343565b611dae565b6103da600b5481565b6103b261065e366004613010565b611ec3565b6103b2611fc0565b6103b261205e565b6103b26106813660046132dd565b612275565b6103da60075481565b6103b26123cd565b6103b26106a53660046130105
65b612475565b61038f6106b8366004613010565b60016020526000908152604090205460ff1681565b6103da6201518081565b6103da6106e5366004613010565b60056020526000908152604090205481565b6103b2612558565b6103b261070d366004613046565b6125ef565b6103da6402540be40081565b6008546103529063ffffffff1681565b61059b7f000000000000000000000000000000000000000000000000000000000000000081565b61059b7f000000000000000000000000000000000000000000000000000000
000000000081565b6103b261078a366004613010565b612643565b6103b261079d36600461311d565b6126d3565b6107aa612728565b426009556008805463ffffffff191663ffffffff83169081179091556040519081527f682bc0fb7e0d6bcb974cf556b95f68533cafc411d83d9f33ac192ccf45dda605906020015b60405180910390a150565b610805612728565b6108196001600160a01b0384168383612782565b505050565b6000828260405160200161086192919091825260e01b7fffffffff00000000000000000000000
00000000000000000000000000000000016602082015260240190565b6040516020818303038152906040528051906020012060001c90505b92915050565b61088b612728565b6040517ffc4e51f60000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fc4e51f6906108f890889088908890889088906004016133c2565b600060405180830381600087803b15801561091257600080fd5b505af1
158015610926573d6000803e3d6000fd5b505050505050505050565b336109446000546001600160a01b031690565b6001600160a01b0316148061096857503360009081526003602052604090205460ff165b6109df5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865206f776e6572206f7220677561726460448201527f69616e000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01
b03811660009081526001602052604090205460ff16610a475760405162461bcd60e51b815260206004820152601c60248201527f546869732061646472657373206973206e6f742061206d696e7465720000000060448201526064016109d6565b6001600160a01b0381166000908152600160205260408120805460ff191690555b600254811015610b6d57816001600160a01b031660028281548110610a8f57610a8f6133f5565b6000918252602090912001546001600160a01b031603610b5b5760028054610ab9906001906134
21565b81548110610ac957610ac96133f5565b600091825260209091200154600280546001600160a01b039092169183908110610af557610af56133f5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480610b3457610b34613434565b600082815260209020810160001990810180546001600160a01b0319169055019055610b6d565b80610b658161344a565b915050610a68565b506040516001600160a01b038216907fe94479a9f7e1952cc78
f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b610bad612728565b6040517f1171bda90000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528381166024830152604482018390527f00000000000000000000000000000000000000000000000000000000000000001690631171bda9906064015b600060405180830381600087803b158015610c3957600080fd5b505af1158015610c4d573d6000803e3d6000fd5b50505050505050565b33
6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cce5760405162461bcd60e51b815260206004820152601660248201527f43616c6c6572206973206e6f74207468652042616e6b0000000000000000000060448201526064016109d6565b6000839003610d1f5760405162461bcd60e51b815260206004820152601760248201527f4e6f206465706f7369746f72732073706563696669656400000000000000000060448201526064016109d6565b60005b83811015610
daa576000858583818110610d3e57610d3e6133f5565b9050602002016020810190610d539190613010565b90506000848484818110610d6957610d696133f5565b905060200201359050610d9582610d90846402540be40085610d8b9190613463565b612802565b612905565b50508080610da29061344a565b915050610d22565b5050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e295760405162461bcd60e51b81526020600482015260166024
8201527f43616c6c6572206973206e6f74207468652042616e6b0000000000000000000060448201526064016109d6565b6040516370a0823160e01b81526001600160a01b03858116600483015284917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb7919061347a565b1015610f105760405162461bcd60e51b815
260206004820152602260248201527f416d6f756e7420657863656564732062616c616e636520696e207468652062616044820152616e6b60f01b60648201526084016109d6565b610f2384610d906402540be40086613463565b604051631f1b6d2760e21b81526001600160a01b038581166004830152306024830152604482018590527f00000000000000000000000000000000000000000000000000000000000000001690637c6db49c906064015b600060405180830381600087803b158015610f9457600080fd5b505af11580
15610fa8573d6000803e3d6000fd5b5050505050505050565b610fba612728565b6001600160a01b0381166110105760405162461bcd60e51b815260206004820181905260248201527f4e6577207661756c7420616464726573732063616e6e6f74206265207a65726f60448201526064016109d6565b604080516001600160a01b03831681524260208201527f5cc842cab066489e13292128663547c68705dbf476f0131e0107f155719c6124910160405180910390a142600b55600a80546001600160a01b0319166001600160a01b`,
  value: 0n,
  chainId: 11155111n,
  signature: {
    r: "0x7cb7330c159638d17ce3e8eb15b58cfa1b0defd0fbb0520e6d4d35e35a565a41",
    s: "0x2560b1e52aaf4469025b5693d04c21c45e15a60c77abe05b9870b16be590d190",
    yParity: 0,
    networkV: null,
    v: 27,
    legacyChainId: null,
    yParityAndS: "",
    compactSerialized: "",
    serialized: "",
    clone: function (): Signature {
      throw new Error("Function not implemented.");
    },
    toJSON: function () {
      throw new Error("Function not implemented.");
    },
  },
  accessList: [],
  blobVersionedHashes: null,
} as unknown as TransactionResponse;

export const MockLog: Log = {
  provider: rpcProvider,
  blockHash:
    "0x20c16f757d1fecd1ca00006cb5e10b541b04c70ad0ab3c4cd444f4cd9a0d437b",
  blockNumber: 455564,
  data: "",
  index: 1000,
  transactionHash:
    "0xcbc920e7bb89cbcb540a469a16226bf1057825283ab8eac3f45d00811eef8a64",
  toJSON(): any {},
  address: "",
  removed: false,
  getTransaction: () => Promise.resolve(mockTransactionResponse),
  topics: [],
  getBlock: () => Promise.resolve([] as unknown as Block),
  transactionIndex: 123,
  getTransactionReceipt: () => Promise.resolve(mockTransactionReceipt),
  removedEvent: () => [] as unknown as OrphanFilter,
};

export const mockTransactionReceipt = {
  provider: rpcProvider,
  to: null,
  from: "0x68ad60CC5e8f3B7cC53beaB321cf0e6036962dBc",
  contractAddress: "0xB5679dE944A79732A75CE556191DF11F489448d5",
  hash: "0xfc2b3b6db38a51db3b9cb95de29b719de8deb99630626e4b4b99df056ffb7f2e",
  index: 40,
  blockHash:
    "0x20c16f757d1fecd1ca00006cb5e10b541b04c70ad0ab3c4cd444f4cd9a0d437b",
  blockNumber: 4553069,
  logsBloom:
    "0x
  gasUsed: 3123717n,
  blobGasUsed: null,
  cumulativeGasUsed: 13068509n,
  gasPrice: 1698988391n,
  blobGasPrice: null,
  type: 2,
  status: 1,
  root: null,
  logs: [MockLog],
} as unknown as TransactionReceipt;

export const MockTransactionResponseDto = new TransactionResponseDto(
  mockTransactionResponse as unknown as TransactionResponse,
  mockTransactionReceipt as unknown as TransactionReceipt,
);
